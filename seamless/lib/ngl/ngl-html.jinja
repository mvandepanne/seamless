<!DOCTYPE html>
<html lang="en">
<head>
    <title>NGL - test</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
</head>
<body>
  <script src="{{ngl_dir}}ngl.js"></script>
  <script>
    //Cell state variables
    var update = {};
    var molstate = {};

    // Create NGL Stage object
    var stage;

    function init_NGL(){
      var viewport = document.getElementById('viewport');
      if (viewport == null) {
        return document.addEventListener( "DOMContentLoaded", function(){
          init_NGL();
        });
      };

      stage = new NGL.Stage(viewport);

      // create tooltip element and add to the viewer canvas
      var tooltip = document.createElement( "div" );
      Object.assign( tooltip.style, {
          display: "none",
          position: "absolute",
          zIndex: 10,
          pointerEvents: "none",
          backgroundColor: "rgba( 0, 0, 0, 0.6 )",
          color: "lightgrey",
          padding: "0.5em",
          fontFamily: "sans-serif"
      } );
      stage.viewer.container.appendChild( tooltip );

      // listen to `hovered` signal to move tooltip around and change its text
      stage.signals.hovered.add( function( pickingProxy ){
          if( pickingProxy && ( pickingProxy.atom || pickingProxy.bond ) ){
              var atom = pickingProxy.atom || pickingProxy.closestBondAtom;
              var cp = pickingProxy.canvasPosition;
              tooltip.innerText = "ATOM: " + atom.qualifiedName();
              tooltip.style.bottom = cp.y + 3 + "px";
              tooltip.style.left = cp.x + 3 + "px";
              tooltip.style.display = "block";
          }else{
              tooltip.style.display = "none";
          }
      } );

      // Handle window resizing
      window.addEventListener( "resize", function( event ){
          stage.handleResize();
      }, false );

      var evt = new CustomEvent('init_NGL');
      window.dispatchEvent(evt);
    }
    init_NGL();
  </script>
  <script>

    function wait_for_ngl(callback) {

    }
    function init_mol(molname) {
      if (molname in molstate) return;
      var mol = {
        data: null,
        dataformat: null,
        representations: null,
        component: null,
        transformation: null,
      };
      molstate[molname] = mol;
    }

    function do_update() {
      for (v in update) {
        var vv = v.split("_");
        var data = update[v];
        var dataname = vv[0];
        var molname = vv[1];
        init_mol(molname);
        molstate[molname][dataname] = data;
      }
      for (molname in molstate) {
        if (("data_" + molname) in update) {
            load_data(molname);
        }
        else {
          if (("representations_" + molname) in update) {
            load_representations(molname);
          }
          if (("transformation_" + molname) in update) {
            set_transformation(molname);
          }
        }
      }
      update = {}
    }

    function set_transformation(molname) {
      if (stage == null) {
        function load_set_transformation() {
          window.removeEventListener(load_set_transformation);
          load_set_transformation(molname);
        }
        window.addEventListener('init_NGL', load_set_transformation);
      };
      if (!(molname in molstate)) return;
      var mol = molstate[molname];
      var t = mol.transformation;
      if (t==null) return;
      var comp = mol.component;
      if (comp==null) return;
      var tt = t[0].concat(t[1], t[2], t[3]);
      var m = new NGL.Matrix4().fromArray(tt).transpose();
      comp.setTransform( m );
    }

    function load_representations(molname) {
      if (stage == null) {
        function load_set_representations() {
          window.removeEventListener(load_set_representations);
          load_set_representations(molname);
        }
        window.addEventListener('init_NGL', load_set_representations);
      };
      if (!(molname in molstate)) return;
      var mol = molstate[molname];
      var comp = mol.component;
      if (comp==null) return;
      var rep = mol.representations;
      if (comp.reprList) {
        comp.removeAllRepresentations();
      }
      for (i=0;i<rep.length; i++) {
        var r = rep[i];
        var repr = "cartoon";
        if ("representation" in r) repr = r.representation;
        else if ("repr" in r) repr = r.repr;
        comp.addRepresentation(repr, r);
      }
    };

    function load_data(molname) {
        if (stage == null) {
          function load_data_listen() {
            window.removeEventListener(load_data_listen);
            load_data(molname);
          }
          window.addEventListener('init_NGL', load_data_listen);
        };
        var mol = molstate[molname];
        var comp = mol.component;
        if (comp != null) stage.removeComponent(comp);
        var stringBlob = new Blob( [ mol.data ], { type: 'text/plain'} );
        return Promise.all( [
            stage.loadFile( stringBlob, { ext: mol.dataformat } )
        ] ).then( function( ol ){
          comp = ol[0];
          mol.component = comp;
          load_representations(molname);
          set_transformation(molname);
          stage.autoView();
        });
    };


</script>
{{dynamic}}
<div id="viewport" style="width:800px; height:800px;"></div>
</body>
</html>
